#!/usr/bin/env python
#-*- coding: utf-8 -*-
#    
#    vm5k: Automatic deployment of virtual machine on Grid'5000  
#     Created by L. Pouilloux and M. Imbert (INRIA, 2013) 
# 
#    A great thanks to A. Lèbre and J. Pastor for alpha testing :)
#
#
import os, argparse
from pprint import pformat
from time import strftime
from logging import INFO, DEBUG, WARN
from math import ceil
from xml.etree.ElementTree import fromstring, parse, dump
from execo import logger
from execo.log import style
from execo.config import TAKTUK, CHAINPUT
from execo.action import ActionFactory
from execo.time_utils import Timer
from execo_g5k import oargridsub, get_g5k_clusters
from execo_g5k.oargrid import get_oargridsub_commandline
from execo_g5k.planning import get_planning, compute_slots, show_resources, find_free_slot, \
    get_jobs_specs
from vm5k import vm5k_deployment, define_vms, get_oar_job_vm5k_resources, get_max_vms, \
    get_oargrid_job_vm5k_resources, get_vms_slot, print_step, distribute_vms 


### INITIALIZATION 

## Constants
deployment_tries = 1
default_action_factory = ActionFactory(remote_tool = TAKTUK,
                    fileput_tool = TAKTUK,
                    fileget_tool = TAKTUK)
blacklisted = ['graphite', 'helios', 'sagittaire']
## Command line options
prog = 'vm5k'
desc = 'A tool to deploy and configure nodes and virtual machines with '+\
    style.log_header('Debian')+' and '+style.log_header('libvirt')+'\non the '+\
    style.log_header('Grid5000')+' platform in a '+style.log_header('KaVLAN')+\
    '.\nYou must select one of these options combinations:'+\
    '\n - '+style.host('n_vm + oargrid_job_id')+\
    ' = use an existing reservation and specify number of VMs'+\
    '\n - '+style.host('infile + oargrid_job_id')+\
    ' = use an existing reservation and specify vm placement XML file'+\
    '\n - '+style.host('n_vm + walltime')+\
    ' = perform a reservation that has enough RAM'+\
    '\n - '+style.host('infile + walltime')+\
    ' = perform a reservation according to the placement XML infile'+\
    '.\nBased on execo-2.2, '+style.emph('http://execo.gforge.inria.fr/doc/')
epilog = style.host('Examples:')+'\nDeploy 100 VM with the default environnements for 3h '+\
    style.command('\n  %(prog)s -n 100 -w 3:00:00 \n')+\
    'Issues/features requests can be reported to '+style.emph('https://github.com/lpouillo/vm5k')

parser = argparse.ArgumentParser(prog = prog, description = desc, epilog = epilog, 
                formatter_class = argparse.RawTextHelpFormatter, add_help = False)
## Run options
run = parser.add_argument_group(style.host('Execution'), 
                "Manage how %(prog)s is executed")
run.add_argument("-h", "--help", 
                action = "help", 
                help = "show this help message and exit")
optio = run.add_mutually_exclusive_group()
optio.add_argument("-v", "--verbose", 
                action = "store_true", 
                help = 'print debug messages')
optio.add_argument("-q", "--quiet", 
                action = "store_true",
                help = 'print only warning and error messages')
run.add_argument("-o", "--outdir", 
                dest = "outdir", 
                default = 'vm5k_'+strftime("%Y%m%d_%H%M%S_%z"),
                help = 'where to store the vm5k log files'+\
                    "\ndefault = %(default)s")
 
## Reservation
mode = parser.add_argument_group( style.host("Mode"), 
                "Define the mode of %(prog)s")
optnvm = mode.add_mutually_exclusive_group()
optnvm.add_argument('-n', '--n_vm',
                dest = 'n_vm',
                type = int,
                help = 'number of virtual machines' )
optnvm.add_argument('-i', '--infile',
                dest = "infile",
                help = 'XML file describing the placement of VM on G5K sites and clusters' )
optresa = mode.add_mutually_exclusive_group()
optresa.add_argument('-j', '--job_id',
                dest = 'job_id',
                help = 'use the hosts from a oargrid_job or a oar_job.' )
optresa.add_argument('-w', '--walltime',
                dest = 'walltime',
                help = 'duration of your reservation')
optresa.add_argument('-k', '--kavlan',
                dest = 'kavlan',
                help = 'Deploy the VM in a KaVLAN' )

## Hosts configuration
hosts =  parser.add_argument_group(style.host('Physical hosts'),
            "Tune the physical hosts.")
hosts.add_argument('-r', '--resources',
                dest = 'resources',
                default = 'grid5000',
                help = 'list of Grid\'5000 elements')
optenv = hosts.add_mutually_exclusive_group()
optenv.add_argument('-e', '--env_name', 
                dest = 'env_name',
                help = 'Kadeploy environment name')
optenv.add_argument('-a', '--env_file', 
                dest = 'env_file',
                help = 'path to the Kadeploy environment file')
optdeploy = hosts.add_mutually_exclusive_group()
optdeploy.add_argument('--forcedeploy',
                action = "store_true", 
                help = 'force the deployment of the hosts')
optdeploy.add_argument('--nodeploy',
                action = "store_true", 
                help = 'consider that hosts are already deployed')
hosts.add_argument('--host_packages',
                dest = 'host_packages',
                help = 'comma separated list of packages to be installed on the hosts')

## VMs configuration
vms = parser.add_argument_group(style.host('Virtual machines'),
                "Tune the virtual machines.")
vms.add_argument('-t', '--vm_template', 
                    dest = 'vm_template',
                    help = 'XML string describing the virtual machine',
                    default = '<vm mem="1024" hdd="10" cpu="1" cpuset="auto"/>')
vms.add_argument('-f', '--vm_backing_file', 
                    dest = 'vm_backing_file',
                    default = '/grid5000/images/KVM/squeeze-x64-base.qcow2',
                    help = 'backing file for your virtual machines')
vms.add_argument('-l', '--vm_disk_location', 
                    default = 'one',
                    dest = 'vm_disk_location',
                    help = 'Where to create the qcow2: one (default) or all)')
vms.add_argument('-d', '--vm_distribution',
                    default = 'distributed', 
                    dest = 'vm_distribution',
                    help = 'how to distribute the VM distributed (default) or concentrated')
vms.add_argument('--vm_packages',
                dest = 'vm_packages',
                help = 'comma separated list of packages to be installed on the vms')

args = parser.parse_args()

## Start a timer
timer = Timer()
execution_time = {}
out_deploy = False
## Set log level
if args.verbose:
    logger.setLevel(DEBUG)
    out_deploy = True
elif args.quiet:
    logger.setLevel(WARN)
else:
    logger.setLevel(INFO)


if args.n_vm is None and args.infile is None:
    parser.error('Must specify one of the following options: -n %s or -i %s, use -h for help ' %\
                 ( style.emph('n_vm'), style.emph('infile')) )
if args.walltime is None and args.job_id is None:
    parser.error('Must specify one of the following options: -w %s or -j, see -h for help' % \
                 (style.emph('walltime')+' or -j '+style.emph('job_id')) )

## Start message
print_step('INITIALIZATION')
logger.debug('Options\n'+'\n'.join( [ style.emph(option.ljust(20))+\
                    '= '+str(value).ljust(10) for option, value in vars(args).iteritems() if value is not None ]))

## Create output directory
try:
    os.mkdir(args.outdir)
except os.error:
    pass

### DEFINING VMS AND ELEMENTS
if args.infile is not None:
    logger.info( 'Using an %s for the topology', style.emph(args.infile))
    vm5k = parse(args.infile).getroot()
    vms = []
    for vm in vm5k.findall('.//vm'):
        vms.append( define_vms([vm.get('id')], template = vm)[0])
    if logger.getEffectiveLevel() <= 10:
        dump(vm5k)
    elements = { cluster.get('id'): len(cluster.findall('./host')) for cluster in vm5k.findall('.//cluster') }
else:
    logger.info('Using n_vm = %s, \nvm_template = %s and resources %s', 
                style.emph(args.n_vm), style.emph(args.vm_template), style.emph(args.resources))
    vms = define_vms(['vm-'+str(i+1) for i in range(args.n_vm)], 
                     template = fromstring(args.vm_template))
    elements = {}
    for element in args.resources.split(','):
        if ':' in element:
            element_uid, n_nodes = element.split(':')
        else: 
            element_uid, n_nodes = element, 0
        elements[element_uid] = int(n_nodes)
        
show_resources(elements, 'Resources wanted')


# MANAGING RESERVATION
logger.info(style.log_header('Reservation'))
frontend = None
if args.job_id is None:
    logger.info('Finding a slot for your reservation')
    if args.kavlan:
        kavlan = True 
        subnet = False
    else:
        kavlan = False
        subnet = True
        subnets = 'slash_22='+str(int(ceil(len(vms)/1024.)))

    planning = get_planning(elements, vlan = kavlan, subnet = subnet)
    slots = compute_slots(planning, walltime = args.walltime, excluded_elements = blacklisted)
    # Test if we need a free slot or a vms slot
    for element, n_nodes in elements.iteritems():
        if n_nodes > 0:
            free = True
            break
        free = False
    if free:
        slot = find_free_slot(slots, elements)
    else:
        slot = get_vms_slot(vms, slots)
    startdate = slot[1]
    resources = { cluster: n_nodes for cluster, n_nodes in slot[2].iteritems() if cluster in get_g5k_clusters() }
    
    ## TODO REDUCE RESOURCES
    
    show_resources(resources)
    jobs_specs = get_jobs_specs(resources)
    for OarSubmission, _ in jobs_specs:
        OarSubmission.resources = 'slash_22=2+'+OarSubmission.resources
    
    
    logger.debug('Jobs specifications %s', pformat(jobs_specs) )
    
    (job_id, _) = oargridsub(jobs_specs, walltime = args.walltime, 
         additional_options = "-t deploy", reservation_date = startdate)
    if job_id is None:
        logger.error('Wrong command line ? \n%s', get_oargridsub_commandline(jobs_specs, walltime = args.walltime, 
         additional_options = "-t deploy", reservation_date = startdate))
    
else:
    logger.info('Using an existing job: %s', style.emph(args.job_id))
    if ':' in args.job_id:
        frontend, job_id = args.job_id.split(':')
    else:
        frontend, job_id = None, args.job_id
    


logger.info('Retrieving hosts and network parameters')
if frontend is None:
    vm5k_resources = get_oargrid_job_vm5k_resources(int(job_id))
else:
    vm5k_resources = get_oar_job_vm5k_resources(int(job_id), frontend)


vm5k = vm5k_deployment(resources = vm5k_resources, vms = vms)  
vm5k.fact = ActionFactory(remote_tool = TAKTUK,
                                fileput_tool = CHAINPUT,
                                fileget_tool = TAKTUK)
  
if args.nodeploy:
    deployment_tries = 0
print_step('Deploying the hosts')
vm5k.hosts_deployment(max_tries = deployment_tries, check_deploy =  not args.forcedeploy)
print_step('Managing packages')
vm5k.packages_management(upgrade = True, other_packages = 'hwloc')
print_step('Configuring libvirt')
vm5k.configure_libvirt()


print_step('Deploying virtual machines')
logger.info('Maximum number of VMs %s', get_max_vms(vm5k.hosts))
distribute_vms(vm5k.vms, vm5k.hosts)
vm5k.get_state()
vm5k.deploy_vms()
vm5k.get_state()
